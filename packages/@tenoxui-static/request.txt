
// Current usage example :

const ui = new TenoxUI({
  property: {
    bg: 'background',
    p: {
      property: 'padding',
      value: '{0}px'
    },
    px: ['paddingLeft', 'paddingRight'],
    py: {
      property: ['paddingTop', 'paddingBottom'],
      value: '{0}px'
    }
  }
})

ui.processClassNames(["bg-red", "p-4", "px-1rem", "py-20"])
console.log(ui.generateStylesheet())

// output :
.bg-red { background: red }
.p-4 { padding: 4px }
.px-1rem { padding-left: 1rem; padding-right: 1rem }
.py-20 { padding-top: 20px; padding-bottom: 20px }


// i want to create more complex condition for the property field. This is what i have in mind :

const ui = new TenoxUI({
  property: {
    // defining property as array
    border: [
      {
        type: '<color>',
        property: 'borderColor'
      },
      {
        type: '<number>',
        property: 'borderWidth',
        value: '{0}px'
      }
    ]
  }
})

// and then i can use it like this :

// if the value is considered color

border-red // => .border-red { border-color: red }

// if number is inputted

border-1 // => .border-1 { border-width: 1px }

